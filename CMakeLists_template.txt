#${templateWarning}
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_VERSION 1)
${cmakeRequiredVersion}
# specify cross-compilers and tools
set(CMAKE_C_COMPILER arm-none-eabi-gcc)
set(CMAKE_CXX_COMPILER arm-none-eabi-g++)
set(CMAKE_ASM_COMPILER  arm-none-eabi-gcc)
set(CMAKE_AR arm-none-eabi-ar)
set(CMAKE_OBJCOPY arm-none-eabi-objcopy)
set(CMAKE_OBJDUMP arm-none-eabi-objdump)
set(SIZE arm-none-eabi-size)
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

# project settings
project(${projectName} C CXX ASM)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_C_STANDARD 11)

#Uncomment for hardware floating point
add_compile_definitions(ARM_MATH_CM4;ARM_MATH_MATRIX_CHECK;ARM_MATH_ROUNDING)
add_compile_options(-mfloat-abi=hard -mfpu=fpv4-sp-d16)
add_link_options(-mfloat-abi=hard -mfpu=fpv4-sp-d16)

#Uncomment for software floating point
#add_compile_options(-mfloat-abi=soft)

add_compile_options(-mcpu=${mcpu} -mthumb -mthumb-interwork)
add_compile_options(-ffunction-sections -fdata-sections -fno-common -fmessage-length=0)

# uncomment to mitigate c++17 absolute addresses warnings
#set(CMAKE_CXX_FLAGS "$${CMAKE_CXX_FLAGS} -Wno-register")

# Enable assembler files preprocessing
add_compile_options($<$<COMPILE_LANGUAGE:ASM>:-x$<SEMICOLON>assembler-with-cpp>)

if ("$${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    message(STATUS "Maximum optimization for speed")
    add_compile_options(-Ofast)
elseif ("$${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
    message(STATUS "Maximum optimization for speed, debug info included")
    add_compile_options(-Ofast -g)
elseif ("$${CMAKE_BUILD_TYPE}" STREQUAL "MinSizeRel")
    message(STATUS "Maximum optimization for size")
    add_compile_options(-Os)
else ()
    message(STATUS "Minimal optimization, debug info included")
    add_compile_options(-Og -g)
endif ()

include_directories(${includes}
    bsp
    component
    component/play
    component/algorithm
    component/algorithm/filters
    component/driver
    component/driver/motor
    component/driver/IMU
    component/driver/IMU/BMI088
    component/RM_referee
    component/user
    component/user/peripheral
    component/user/app
    component/Matrix_Robotics
    USB_DEVICE/App
    USB_DEVICE/Target
)

add_definitions(${defines})

file(GLOB_RECURSE SOURCES ${sources}
    "bsp/*.*"
    "component/*.*"
    "USB_DEVICE/*.*"
)

#DSP-Old
#link_directories(Middlewares/ST/ARM/DSP/Lib)
#link_libraries(libarm_cortexM4lf_math.a)

#DSP-New
link_directories(Middlewares)
link_libraries(libCMSISDSP.a)

#link_libraries(CMSISDSP)
set(DSP ${CMAKE_SOURCE_DIR}/CMSIS-DSP)
include_directories(${DSP}/Include)
add_subdirectory(${DSP}/Source bin_dsp)

#Eigen
include_directories(/)
include_directories(Eigen)
#find_package (Eigen3 REQUIRED)
#link_libraries(Eigen3::Eigen)

set(LINKER_SCRIPT $${CMAKE_SOURCE_DIR}/${linkerScript})

add_link_options(-Wl,-gc-sections,--print-memory-usage,-Map=$${PROJECT_BINARY_DIR}/$${PROJECT_NAME}.map)
add_link_options(-mcpu=${mcpu} -mthumb -mthumb-interwork)
add_link_options(-T $${LINKER_SCRIPT})

add_executable($${PROJECT_NAME}.elf $${SOURCES} $${LINKER_SCRIPT})

set(HEX_FILE $${PROJECT_BINARY_DIR}/$${PROJECT_NAME}.hex)
set(BIN_FILE $${PROJECT_BINARY_DIR}/$${PROJECT_NAME}.bin)

add_custom_command(TARGET $${PROJECT_NAME}.elf POST_BUILD
        COMMAND $${CMAKE_OBJCOPY} -Oihex $<TARGET_FILE:$${PROJECT_NAME}.elf> $${HEX_FILE}
        COMMAND $${CMAKE_OBJCOPY} -Obinary $<TARGET_FILE:$${PROJECT_NAME}.elf> $${BIN_FILE}
        COMMENT "Building $${HEX_FILE}
Building $${BIN_FILE}")
